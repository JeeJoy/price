<?php	$xmlfile = $_SERVER['DOCUMENT_ROOT']."/data/rules.xml";		class Log {		public function write($text) {			$path = 'logs/main.log';			$text = '['.date('d.m.Y').'|'.date('H:i:s').'] '.$text;			$fp = fopen($path, "a"); // Открываем файл в режиме записи			$test = fwrite($fp, $text."\r\n"); // Запись в файл			fclose($fp);		}				public function get($file) {			/*$filename = "logs/".$file;			$handle = fopen ($filename, "r");			while (!feof ($handle)) { 			    $buffer = fgets($handle, 4096);				echo $buffer.'<br>'; 			} 			fclose ($handle);*/		}	}		class LogGoodBad {		public function write($status, $mail, $text) {			if ($status == 'good' or $status == 'bad') {				$file = date('YmdHis').'_'.$status.'_'.$mail.'_'.substr(md5(uniqid()), 0, 8).'.log';				$path = "logs/".$status."/".$file;								// Обрабатываем $text				$text = preg_replace('/\s\s+/', ' ', $text);				$text = str_replace ('<br>', "\r\n", $text);								// Записываем в файл				$fp = fopen($path, "a"); // Открываем файл в режиме записи				$test = fwrite($fp, $text."\r\n"); // Запись в файл				fclose($fp);				return 'Log file: '.$path;			}		}				public function get($status, $file) {			if ($status == 'good' or $status == 'bad') {				$filename = "logs/".$status."/".$file;				$handle = fopen ($filename, "r");				$buffer = '';				while (!feof ($handle)) { 				    $buffer .= fgets($handle, 4096).'<br>';					//echo $buffer.'<br>'; 				} 				fclose ($handle);				return $buffer;			}		}				function getCount($status) {			if ($status == 'good' or $status == 'bad') {				$array = glob($_SERVER['DOCUMENT_ROOT'].'/logs/'.$status.'/*.log');				if ($array !== false)					return count($array);				else					return '-';			} else {				return '-';			}		}				function printList($status) {			if ($status == 'good' or $status == 'bad') {				if ($handle = opendir($_SERVER['DOCUMENT_ROOT'].'/logs/'.$status.'/')) {				    $i = 0;					foreach(scandir($_SERVER['DOCUMENT_ROOT'].'/logs/'.$status.'/', 1) as $file) {						if ($file != "." && $file != "..") {							if (!$i)								echo('<div class="panel-group" id="accordion'.$status.'">');							$i++;							$bgColor = ($status == 'good' ? 'style="color: rgb(255,255,255); background-color: rgb(71, 164, 71)"' : '');							echo('<div class="panel panel-default">						    	<div class="panel-heading" '.$bgColor.'>						    		<h4 class="panel-title">						    			<a data-toggle="collapse" data-parent="#accordion'.$status.'" href="#collapse'.$status.$i.'">');							// Выделяем дату							$date = substr($file, 0 , 14);							$date = date('Y-m-d H:i:s', strtotime($date));							// Выделяем почту							$offset = ($status == 'good' ? 20 : 19);							$mail = substr($file, $offset, strrpos($file, '_')-$offset);							// Выводим заголовок							echo($date.' от '.$mail);							// Выводим текст							$text = $this->get($status, $file);						    echo('		</a>						      		</h4>						    	</div>						    	<div id="collapse'.$status.$i.'" class="panel-collapse collapse">						      		<div class="panel-body">						        		'.$text.'						      		</div>						    	</div>						  	</div>');						}					}					if ($i)						echo('</div>');					else
						echo('<center><h1>Лог-список пуст.</h1></center>');								    closedir($handle);				}			}		}	}	function rule($provider, $from, $text, $textinfilename, $subject, $newfilename, $path, $flag = 'create', $id = 0) {		if (!$provider or !$from or !$subject or !$textinfilename or !$path)			return 1;			global $xmlfile;			// Если файл отсутствует, то создаем и заполняем		if (!file_exists ($xmlfile)) {			$xml=new DomDocument('1.0','utf-8');			$rules = $xml->appendChild($xml->createElement('Rules'));						$service = $rules->appendChild($xml->createElement('Service'));			$id = $service->appendChild($xml->createElement('ID'));			$value = $id->appendChild($xml->createAttribute('Value'));			$value->value = 1;						$ruleCollection = $rules->appendChild($xml->createElement('RuleCollection'));						$xml->formatOutput = true;			$xml->save($xmlfile);		}				$xml = simplexml_load_file($xmlfile);				if ($flag == 'create') {			// Создаем правило			$ruleNode = $xml->RuleCollection->addChild('Rule');			// ID			$ID = (int)$xml->Service->ID['Value'];			$ruleNode->addAttribute('ID', $ID);			$xml->Service->ID['Value'] = $ID+1;			// Name of provider			$ruleNode->addAttribute('Provider', $provider);			$ruleNode->addAttribute('From', $from);			$ruleNode->addAttribute('Text', $text);			$ruleNode->addAttribute('TextInFilename', $textinfilename);			$ruleNode->addAttribute('Subject', $subject);			$ruleNode->addAttribute('NewFilename', $newfilename);			$ruleNode->addAttribute('Path', $path);			$xml->asXML($xmlfile);		} elseif ($flag == 'edit') {			if (!$id) return 1;						foreach ($xml->RuleCollection->children() as $Rule)			{				if ((int)$id == (int)$Rule['ID']) {					$Rule['Provider'] = $provider;					$Rule['From'] = $from;					$Rule['Text'] = $text;					$Rule['TextInFilename'] = $textinfilename;					$Rule['Subject'] = $subject;					$Rule['NewFilename'] = $newfilename;					$Rule['Path'] = $path;					$xml->asXML($xmlfile);					break;				}			}		} else {
			return 1;
		}	}		function loadRule($id = false) {		global $xmlfile;				if (file_exists($xmlfile))		{			$result = '';			$xml = simplexml_load_file($xmlfile);			if (!$id) { // Получаем все правила				$result[] = array();								$i = 0;				foreach ($xml->RuleCollection->children() as $Rule)				{					$result[$i]['ID'] = (int)$Rule['ID'];					$result[$i]['Provider'] = (string)$Rule['Provider'];					$result[$i]['From'] = (string)$Rule['From'];					$result[$i]['Text'] = (string)$Rule['Text'];					$result[$i]['TextInFilename'] = (string)$Rule['TextInFilename'];					$result[$i]['Subject'] = (string)$Rule['Subject'];					$result[$i]['NewFilename'] = (string)$Rule['NewFilename'];					$result[$i]['Path'] = (string)$Rule['Path'];					$i++;				}			} else { // Получаем конкретное правило				$result = array();								foreach ($xml->RuleCollection->children() as $Rule)				{					if ((int)$id == (int)$Rule['ID']) {						$result['ID'] = (int)$Rule['ID'];						$result['Provider'] = (string)$Rule['Provider'];						$result['From'] = (string)$Rule['From'];						$result['Text'] = (string)$Rule['Text'];						$result['TextInFilename'] = (string)$Rule['TextInFilename'];						$result['Subject'] = (string)$Rule['Subject'];						$result['NewFilename'] = (string)$Rule['NewFilename'];						$result['Path'] = (string)$Rule['Path'];						break;					} else {						$result = false;					}				}			}						return $result;		}	}	function delRule($id) {		global $xmlfile;				$xml = new DOMDocument; 		$xml->load($xmlfile);				$thedocument = $xml->documentElement;				$rules = $thedocument->getElementsByTagName('Rule');		$num = $rules->length;				for ($i=0; $i < $num; $i++) {			$rule = $thedocument->getElementsByTagName('Rule')->item($i);			if ((int)$rule->getAttribute('ID') == (int)$id) {				$rule->parentNode->removeChild($rule);				$xml->save($xmlfile);				return 'Deleted';			}		}	}?>